package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.Tecnico;import me.samcefalo.sistemaiadbackend.models.User;import me.samcefalo.sistemaiadbackend.repositories.TecnicoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class TecnicoService {    @Autowired    private TecnicoRepository tecnicoRepository;    @Autowired    private UserSecurityService userSecurityService;    public Tecnico find(int id) {        return tecnicoRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objeto n√£o encontrado. ID: " + id + ", Tipo: " + Tecnico.class.getSimpleName()));    }    public Tecnico insert(Tecnico tecnico) {        if (!userSecurityService.isAuth(tecnico)) {            throw new AuthorizationException("Acesso negado.");        }        return tecnicoRepository.save(tecnico);    }    public Tecnico update(Tecnico tecnico) {        Tecnico tecnicoDB = find(tecnico.getId());        if (!userSecurityService.isAuth(tecnicoDB)) {            throw new AuthorizationException("Acesso negado.");        }        updateData(tecnicoDB, tecnico);        return tecnicoRepository.save(tecnicoDB);    }    private void updateData(Tecnico tecnicoDB, Tecnico tecnico) {        tecnicoDB.setNome(tecnico.getNome());        tecnicoDB.setEquipe(tecnico.getEquipe());    }    public void delete(int id) {        Tecnico tecnico = find(id);        if (!userSecurityService.isAuth(tecnico)) {            throw new AuthorizationException("Acesso negado.");        }        delete(tecnico);    }    private void delete(Tecnico tecnico) {        tecnicoRepository.delete(tecnico);    }    @Transactional(readOnly = true)    public Page<Tecnico> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return tecnicoRepository.findAllByUser(pageRequest, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Tecnico> findAll() {        return tecnicoRepository.findAll();    }    @Transactional(readOnly = true)    public List<Tecnico> findAllByUser(User user) {        return tecnicoRepository.findAllByUser(user);    }}