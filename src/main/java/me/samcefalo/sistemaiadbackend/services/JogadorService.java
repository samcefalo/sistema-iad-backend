package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.domain.Acao;import me.samcefalo.sistemaiadbackend.domain.Entidade;import me.samcefalo.sistemaiadbackend.domain.Jogador;import me.samcefalo.sistemaiadbackend.domain.Jogo;import me.samcefalo.sistemaiadbackend.repositories.AcaoRepository;import me.samcefalo.sistemaiadbackend.repositories.JogadorRepository;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.DataIntegrityException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class JogadorService {    @Autowired    private JogadorRepository jogadorRepository;    @Autowired    private AcaoRepository acaoRepository;    @Autowired    private JogoRepository jogoRepository;    public Jogador find(int id) {        return jogadorRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objecto não encontrado. ID: " + id + ", Tipo: " + Entidade.class.getName()));    }    public Jogador insert(Jogador jogador) {        return jogadorRepository.save(jogador);    }    public Jogador update(Jogador jogador) {        Jogador jogadorNew = find(jogador.getId());        updateData(jogadorNew, jogador);        return jogadorRepository.save(jogadorNew);    }    private void updateData(Jogador jogadorNew, Jogador jogador) {        jogadorNew.setNome(jogador.getNome());        jogadorNew.setEquipe(jogador.getEquipe());        jogadorNew.setNumero(jogador.getNumero());        jogadorNew.setExpulso(jogador.isExpulso());        jogadorNew.setTitular(jogador.isTitular());    }    public void delete(int id) {        Jogador jogador = find(id);        delete(jogador);    }    public void delete(Jogador jogador) {        try {            jogadorRepository.delete(jogador);        } catch (DataIntegrityViolationException e) {            throw new DataIntegrityException("Não é possível excluir uma categoria que possui produtos");        }    }    @Transactional(readOnly = true)    public List<Jogador> findAll() {        return jogadorRepository.findAll();    }    @Transactional    public List<Acao> findAcoes(int id) {        Jogador jogador = find(id);        return acaoRepository.findByJogador(jogador);    }    @Transactional    public List<Acao> findAcoesAndExito(int id, boolean exito) {        Jogador jogador = find(id);        return acaoRepository.findByJogadorAndExito(jogador, exito);    }    @Transactional    public List<Jogo> findJogos(int id) {        Jogador jogador = find(id);        return jogoRepository.findByJogadores(jogador);    }}