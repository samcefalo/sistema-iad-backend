package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.Acao;import me.samcefalo.sistemaiadbackend.models.Atleta;import me.samcefalo.sistemaiadbackend.models.Equipe;import me.samcefalo.sistemaiadbackend.models.User;import me.samcefalo.sistemaiadbackend.repositories.AcaoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class AcaoService {    @Autowired    private AcaoRepository acaoRepository;    @Autowired    private UserSecurityService userSecurityService;    public Acao find(int id) {        return acaoRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objeto n√£o encontrado. ID: " + id + ", Tipo: " + Acao.class.getSimpleName()));    }    public Acao insert(Acao acao) {        if (!userSecurityService.isAuth(acao)) {            throw new AuthorizationException("Acesso negado.");        }        return acaoRepository.save(acao);    }    public Acao update(Acao acao) {        Acao acaoDB = find(acao.getId());        if (!userSecurityService.isAuth(acaoDB)) {            throw new AuthorizationException("Acesso negado.");        }        updateData(acaoDB, acao);        return acaoRepository.save(acaoDB);    }    private void updateData(Acao acaoDB, Acao acao) {        acaoDB.setArea(acao.getArea());        acaoDB.setExito(acao.isExito());        acaoDB.setAtleta(acao.getAtleta());        acaoDB.setGrauDificuldade(acao.getGrauDificuldade());        acaoDB.setEquipe(acao.getEquipe());    }    public void delete(int id) {        Acao acao = find(id);        if (!userSecurityService.isAuth(acao)) {            throw new AuthorizationException("Acesso negado.");        }        delete(acao);    }    private void delete(Acao acao) {        acaoRepository.delete(acao);    }    @Transactional(readOnly = true)    public Page<Acao> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return acaoRepository.findAllByUser(pageRequest, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Acao> findAll() {        return acaoRepository.findAll();    }    @Transactional(readOnly = true)    public List<Acao> findAllByCategoriaAndAtleta(Class<?> categoria, Atleta atleta) {        return acaoRepository                .findAllCategoriaByUserAndAtleta(categoria, atleta, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Acao> findAllByCategoria(Class<?> categoria) {        return acaoRepository.findAllCategoriaByUser(categoria, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Acao> findAllByUser(User user) {        return acaoRepository.findAllByUser(user);    }    @Transactional(readOnly = true)    public List<Acao> findByEquipe(Equipe equipe) {        return acaoRepository.findByEquipeAndUser(equipe, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public Page<Acao> findPageByEquipe(Equipe equipe, PageRequest pageRequest) {        return acaoRepository.findByEquipeAndUser(equipe, pageRequest, userSecurityService.authenticatedUser());    }    @Transactional    public List<Acao> findByAtleta(Atleta atleta) {        return acaoRepository.findByAtletaAndUser(atleta, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public Page<Acao> findPageByAtleta(Atleta atleta, PageRequest pageRequest) {        return acaoRepository.findByAtletaAndUser(atleta, pageRequest, userSecurityService.authenticatedUser());    }}