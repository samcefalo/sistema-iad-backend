package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.domain.*;import me.samcefalo.sistemaiadbackend.domain.dto.AcaoDTO;import me.samcefalo.sistemaiadbackend.mappers.AcaoMappers;import me.samcefalo.sistemaiadbackend.repositories.AcaoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;@Servicepublic class AcaoService {    @Autowired    private AcaoRepository acaoRepository;    @Autowired    private AcaoMappers mappers;    public Acao find(int id) {        return acaoRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objecto n√£o encontrado. ID: " + id + ", Tipo: " + Acao.class.getName()));    }    public Acao insert(Acao acao) {        return acaoRepository.save(acao);    }    public Acao update(Acao acao) {        Acao acaoNew = find(acao.getId());        updateData(acaoNew, acao);        return acaoRepository.save(acaoNew);    }    private void updateData(Acao acaoNew, Acao acao) {        acaoNew.setArea(acao.getArea());        acaoNew.setExito(acao.isExito());        acaoNew.setJogador(acao.getJogador());        acaoNew.setGrauDificuldade(acao.getGrauDificuldade());        acaoNew.setEquipe(acao.getEquipe());    }    public void delete(int id) {        Acao acao = find(id);        delete(acao);    }    private void delete(Acao acao) {        acaoRepository.delete(acao);    }    public List<Acao> findAll() {        return acaoRepository.findAll();    }    public AcaoDTO getAcaoDto(Acao acao) {        if (acao instanceof Finalizacao) {            return mappers.finalizacaoToFinalizacaoDto((Finalizacao) acao);        } else if (acao instanceof Desarme) {            return mappers.desarmeToDesarmeDto((Desarme) acao);        } else if (acao instanceof Drible) {            return mappers.dribleToDribleDto((Drible) acao);        } else {            return mappers.passeToPasseDto((Passe) acao);        }    }    public List<AcaoDTO> getListAcaoDto(List<Acao> acoes) {        List<AcaoDTO> acoesDTOS = new ArrayList<>();        acoesDTOS.addAll(acoes.stream().map(acao -> getAcaoDto(acao))                .collect(Collectors.toList()));        return acoesDTOS;    }}