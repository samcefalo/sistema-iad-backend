package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.domain.Acao;import me.samcefalo.sistemaiadbackend.repositories.AcaoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import me.samcefalo.sistemaiadbackend.services.mappers.AcaoMappers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class AcaoService {    @Autowired    private AcaoRepository acaoRepository;    @Autowired    private AcaoMappers mappers;    public Acao find(int id) {        return acaoRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objecto n√£o encontrado. ID: " + id + ", Tipo: " + Acao.class.getName()));    }    public Acao insert(Acao acao) {        return acaoRepository.save(acao);    }    public Acao update(Acao acao) {        Acao acaoNew = find(acao.getId());        updateData(acaoNew, acao);        return acaoRepository.save(acaoNew);    }    private void updateData(Acao acaoNew, Acao acao) {        acaoNew.setArea(acao.getArea());        acaoNew.setExito(acao.isExito());        acaoNew.setJogador(acao.getJogador());        acaoNew.setGrauDificuldade(acao.getGrauDificuldade());        acaoNew.setEquipe(acao.getEquipe());    }    public void delete(int id) {        Acao acao = find(id);        delete(acao);    }    private void delete(Acao acao) {        acaoRepository.delete(acao);    }    @Transactional(readOnly = true)    public Page<Acao> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return acaoRepository.findAll(pageRequest);    }    @Transactional(readOnly = true)    public List<Acao> findAll() {        return acaoRepository.findAll();    }}