package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.User;import me.samcefalo.sistemaiadbackend.models.enums.UserRole;import me.samcefalo.sistemaiadbackend.repositories.UserRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class UserService {    @Autowired    private UserSecurityService userSecurityService;    @Autowired    private UserRepository userRepository;    @Autowired    private BCryptPasswordEncoder bCryptPasswordEncoder;    public User find(int id) {        if (!userSecurityService.isAuth(id)) {            throw new AuthorizationException("Acesso negado.");        }        return userRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objeto n√£o encontrado. ID: " + id + ", Tipo: " + User.class.getSimpleName()));    }    public User insert(User user) {        if (!userSecurityService.isAdmin() && user.getUserRolesEnum().contains(UserRole.ADMIN)) {            throw new AuthorizationException("Acesso negado.");        }        user.setSenha(bCryptPasswordEncoder.encode(user.getSenha()));        return userRepository.save(user);    }    public User update(User user) {        if (!userSecurityService.isAuth(user.getId())) {            throw new AuthorizationException("Acesso negado.");        }        User userNew = find(user.getId());        updateData(userNew, user);        return userRepository.save(userNew);    }    private void updateData(User userNew, User user) {        userNew.setUsername(user.getUsername());        userNew.getUserRoles().addAll(user.getUserRoles());    }    public void delete(int id) {        User user = find(id);        delete(user);    }    private void delete(User user) {        userRepository.delete(user);    }    @Transactional(readOnly = true)    public Page<User> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return userRepository.findAll(pageRequest);    }    @Transactional(readOnly = true)    public List<User> findAll() {        return userRepository.findAll();    }}