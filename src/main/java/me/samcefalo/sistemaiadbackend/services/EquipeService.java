package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.*;import me.samcefalo.sistemaiadbackend.repositories.EquipeRepository;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class EquipeService {    @Autowired    private EquipeRepository equipeRepository;    @Autowired    private AtletaService atletaService;    @Autowired    private AcaoService acaoService;    //Evitar circle dependency    @Autowired    private JogoRepository jogoRepository;    @Autowired    private UserSecurityService userSecurityService;    public Equipe find(int id) {        return equipeRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objeto nÃ£o encontrado. ID: " + id + ", Tipo: " + Equipe.class.getSimpleName()));    }    public Equipe insert(Equipe equipe) {        if (!userSecurityService.isAuth(equipe)) {            throw new AuthorizationException("Acesso negado.");        }        return equipeRepository.save(equipe);    }    public Equipe update(Equipe equipe) {        Equipe equipeDB = find(equipe.getId());        if (!userSecurityService.isAuth(equipeDB)) {            throw new AuthorizationException("Acesso negado.");        }        updateData(equipeDB, equipe);        return equipeRepository.save(equipeDB);    }    private void updateData(Equipe equipeDB, Equipe equipe) {        equipeDB.setNome(equipe.getNome());    }    public void delete(int id) {        Equipe equipe = find(id);        if (!userSecurityService.isAuth(equipe)) {            throw new AuthorizationException("Acesso negado.");        }        delete(equipe);    }    private void delete(Equipe equipe) {        equipe.getJogos()                .stream().forEach(jogo -> {                    jogo.getAtletas().removeIf(atleta -> equipe.getAtletas().contains(atleta));                    jogo.getEquipes().remove(equipe);                    jogoRepository.save(jogo);                });        equipe.getAtletas()                .stream().forEach(atleta -> atletaService.delete(atleta.getId()));        equipeRepository.delete(equipe);    }    @Transactional(readOnly = true)    public Page<Equipe> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return equipeRepository.findAllByUser(pageRequest, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Equipe> findAll() {        return equipeRepository.findAllByUser(userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Equipe> findAllByUser(User user) {        return equipeRepository.findAllByUser(user);    }    public List<Acao> findAcoes(int equipeId, Class<?> categoria) {        if (categoria.equals(Acao.class)) {            return findAcoes(equipeId);        } else            return findAcoesByCategoria(equipeId, categoria);    }    @Transactional(readOnly = true)    public List<Acao> findAcoes(int equipeId) {        Equipe equipe = find(equipeId);        return acaoService.findByEquipe(equipe);    }    @Transactional    public List<Acao> findAcoesByCategoria(int equipeId, Class<?> categoria) {        Equipe equipe = find(equipeId);        return acaoService.findAllByCategoriaAndEquipe(categoria, equipe);    }    @Transactional    public Page<Atleta> findAtletlas(int equipeId, int page, int linesPerPage, String orderBy, String direction) {        Equipe equipe = find(equipeId);        return atletaService.findAllByEquipe(equipe, page, linesPerPage, orderBy, direction);    }    @Transactional(readOnly = true)    public Page<Acao> findAcoesPage(int equipeId, int page, int linesPerPage, String orderBy, String direction) {        Equipe equipe = find(equipeId);        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return acaoService.findPageByEquipe(equipe, pageRequest);    }    @Transactional(readOnly = true)    public Page<Jogo> findJogosPage(int id, int page, int linesPerPage, String orderBy, String direction) {        Equipe equipe = find(id);        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return jogoRepository.findByEquipesAndUser(equipe, pageRequest, userSecurityService.authenticatedUser());    }}