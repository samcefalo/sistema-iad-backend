package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.domain.Acao;import me.samcefalo.sistemaiadbackend.domain.JogoFutsal;import me.samcefalo.sistemaiadbackend.repositories.JogoFutsalRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class JogoFutsalService {    @Autowired    private JogoFutsalRepository jogoFutsalRepository;    @Autowired    private AcaoService acaoService;    public JogoFutsal find(int id) {        return jogoFutsalRepository.findById(id)                .orElseThrow(() -> new ObjectNotFoundException("Objeto n√£o encontrado. ID: " + id + ", Tipo: " + JogoFutsal.class.getSimpleName()));    }    public JogoFutsal insert(JogoFutsal jogoFutsal) {        return jogoFutsalRepository.save(jogoFutsal);    }    public JogoFutsal update(JogoFutsal jogoFutsal) {        JogoFutsal jogoNew = find(jogoFutsal.getId());        updateData(jogoNew, jogoFutsal);        return jogoFutsalRepository.save(jogoNew);    }    private void updateData(JogoFutsal jogoNew, JogoFutsal jogoFutsal) {        jogoNew.setSituacaoJogo(jogoFutsal.getSituacaoJogo());        jogoNew.getEquipes().addAll(jogoFutsal.getEquipes());        jogoNew.setAcoes(jogoFutsal.getAcoes());    }    public void delete(int id) {        JogoFutsal jogoFutsal = find(id);        delete(jogoFutsal);    }    private void delete(JogoFutsal jogoFutsal) {        for (Acao acao : jogoFutsal.getAcoes()) {            acaoService.delete(acao.getId());        }        jogoFutsalRepository.delete(jogoFutsal);    }    @Transactional(readOnly = true)    public Page<JogoFutsal> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return jogoFutsalRepository.findAll(pageRequest);    }    @Transactional(readOnly = true)    public List<JogoFutsal> findAll() {        return jogoFutsalRepository.findAll();    }}