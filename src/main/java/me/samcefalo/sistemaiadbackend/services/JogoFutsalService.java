package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.domain.JogoFutsal;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.DataIntegrityException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class JogoFutsalService {    @Autowired    private JogoRepository jogoRepository;    public JogoFutsal find(int id) {        /*        return findAll().stream()                .filter(jogoFutsal -> jogoFutsal.getId() == id)                .findFirst()                .orElseThrow(() -> new ObjectNotFoundException("Objecto não encontrado. ID: " + id + ", Tipo: " + JogoFutsal.class.getName()));        */        return (JogoFutsal) jogoRepository.findById(id)                .orElseThrow(() -> new ObjectNotFoundException("Objecto não encontrado. ID: " + id + ", Tipo: " + JogoFutsal.class.getName()));    }    public JogoFutsal insert(JogoFutsal jogoFutsal) {        return jogoRepository.save(jogoFutsal);    }    public JogoFutsal update(JogoFutsal jogoFutsal) {        JogoFutsal jogoNew = find(jogoFutsal.getId());        updateData(jogoNew, jogoFutsal);        return jogoRepository.save(jogoNew);    }    private void updateData(JogoFutsal jogoNew, JogoFutsal jogoFutsal) {        jogoNew.setSituacaoJogo(jogoFutsal.getSituacaoJogo());        jogoNew.setEquipe1(jogoFutsal.getEquipe1());        jogoNew.setEquipe2(jogoFutsal.getEquipe2());        jogoNew.setAcoes(jogoFutsal.getAcoes());        jogoNew.setJogadores(jogoFutsal.getJogadores());    }    public void delete(int id) {        JogoFutsal jogoFutsal = find(id);        delete(jogoFutsal);    }    public void delete(JogoFutsal jogoFutsal) {        try {            jogoRepository.delete(jogoFutsal);        } catch (DataIntegrityViolationException e) {            throw new DataIntegrityException("Não é possível excluir uma categoria que possui produtos");        }    }    public List<JogoFutsal> findAll() {       /* return jogoRepository.findAll().stream()                .filter(jogo -> jogo instanceof JogoFutsal)                .map(JogoFutsal.class::cast)                .collect(Collectors.toList());*/        return (List<JogoFutsal>) (List<?>) jogoRepository.findAll();    }    /*    public Jogo fromDTO(JogoDTO jogoDTO) {        //TODO separar os tipos de jogos        JogoFutsal jogoFutsal = new JogoFutsal();        Equipe equipe1 = new Equipe();        equipe1.setId(jogoDTO.getEquipe1Id());        Equipe equipe2 = new Equipe();        equipe2.setId(jogoDTO.getEquipe2Id());        jogoFutsal.setEquipe1(equipe1);        jogoFutsal.setEquipe2(equipe2);        jogoFutsal.setSituacaoJogo(jogoDTO.getSituacaoJogo().getId());        return jogoFutsal;    }     */}