package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.*;import me.samcefalo.sistemaiadbackend.models.enums.UserRole;import me.samcefalo.sistemaiadbackend.repositories.UserRepository;import me.samcefalo.sistemaiadbackend.security.UserSS;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;@Servicepublic class UserSecurityService {    @Autowired    private UserRepository userRepository;    public UserSS authenticated() {        try {            return (UserSS) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        } catch (Exception e) {            return null;        }    }    public User authenticatedUser() {        UserSS userSS = authenticated();        if (userSS == null) {            throw new AuthorizationException("Acesso negado");        }        return userRepository.findById(userSS.getId()).get();    }    public boolean isAuth(User user) {        return isAuth(user.getId());    }    public boolean isAuth(Acao acao) {        return isAuth(acao.getUser().getId());    }    public boolean isAuth(Atleta atleta) {        return isAuth(atleta.getUser().getId());    }    public boolean isAuth(Equipe equipe) {        return isAuth(equipe.getUser().getId());    }    public boolean isAuth(Jogo jogo) {        return isAuth(jogo.getUser().getId());    }    public boolean isAdmin() {        UserSS userSS = authenticated();        if (userSS == null || !userSS.hasRole(UserRole.ADMIN)) {            return false;        }        return true;    }    public boolean isAuth(String email) {        UserSS userSS = authenticated();        if (userSS == null || !userSS.hasRole(UserRole.ADMIN) && !userSS.getUsername().equalsIgnoreCase(email)) {            return false;        }        return true;    }    public boolean isAuth(int id) {        UserSS userSS = authenticated();        if (userSS == null || !userSS.hasRole(UserRole.ADMIN) && userSS.getId() != id) {            return false;        }        return true;    }}