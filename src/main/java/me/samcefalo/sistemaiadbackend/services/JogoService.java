package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.Equipe;import me.samcefalo.sistemaiadbackend.models.Jogador;import me.samcefalo.sistemaiadbackend.models.Jogo;import me.samcefalo.sistemaiadbackend.models.User;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import me.samcefalo.sistemaiadbackend.services.utils.ClassUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class JogoService {    @Autowired    private JogoRepository jogoRepository;    @Autowired    private AcaoService acaoService;    @Autowired    private ClassUtil classUtil;    @Autowired    private UserSecurityService userSecurityService;    @Autowired    private EquipeService equipeService;    public Jogo find(int id) {        return jogoRepository.findById(id)                .orElseThrow(() -> new ObjectNotFoundException("Objeto não encontrado. ID: " + id + ", Tipo: " + Jogo.class.getSimpleName()));    }    public Jogo insert(Jogo jogo) {        if (!userSecurityService.isAuth(jogo)) {            throw new AuthorizationException("Acesso negado.");        }        jogo.getJogadores().clear();        for (Equipe equipe : jogo.getEquipes()) {            equipe = equipeService.find(equipe.getId());            jogo.getJogadores()                    .addAll(equipe.getJogadores());        }        return jogoRepository.save(jogo);    }    public Jogo update(Jogo jogo) {        if (!userSecurityService.isAuth(jogo)) {            throw new AuthorizationException("Acesso negado.");        }        Jogo jogoNew = find(jogo.getId());        updateData(jogoNew, jogo);        return jogoRepository.save(jogoNew);    }    private void updateData(Jogo jogoNew, Jogo jogo) {        jogoNew.setSituacaoJogo(jogo.getSituacaoJogo());        jogoNew.setEquipes(jogo.getEquipes());    }    public void delete(int id) {        Jogo jogo = find(id);        if (!userSecurityService.isAuth(jogo)) {            throw new AuthorizationException("Acesso negado.");        }        delete(jogo);    }    private void delete(Jogo jogo) {        jogo.getAcoes().stream()                .forEach(acao -> acaoService.delete(acao.getId()));        jogoRepository.delete(jogo);    }    @Transactional(readOnly = true)    public Page<Jogo> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return jogoRepository.findAllByUser(pageRequest, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public Page<Jogo> findPageCategoria(String categoria, int page, int linesPerPage, String orderBy, String direction) {        Class<?> categoriaClass;        try {            categoriaClass = classUtil.getJogoClass(categoria);        } catch (ClassNotFoundException e) {            throw new ObjectNotFoundException("Categoria não encontrada. ID: " + categoria + ", Tipo: " + Jogo.class.getSimpleName());        }        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return jogoRepository.findAllCategoriaByUser(categoriaClass, pageRequest, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public List<Jogo> findAll() {        return jogoRepository.findAll();    }    @Transactional(readOnly = true)    public List<Jogo> findAllByUser(User user) {        return jogoRepository.findAllByUser(user);    }    @Transactional(readOnly = true)    public List<Jogo> findByEquipes(Equipe equipe) {        return jogoRepository.findByEquipesAndUser(equipe, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public Page<Jogo> findPageByEquipes(Equipe equipe, PageRequest pageRequest) {        return jogoRepository.findByEquipesAndUser(equipe, pageRequest, userSecurityService.authenticatedUser());    }    @Transactional    public List<Jogo> findByJogadores(Jogador jogador) {        return jogoRepository.findByJogadoresAndUser(jogador, userSecurityService.authenticatedUser());    }}