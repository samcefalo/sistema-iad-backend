package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.domain.Equipe;import me.samcefalo.sistemaiadbackend.domain.Jogo;import me.samcefalo.sistemaiadbackend.domain.JogoFutsal;import me.samcefalo.sistemaiadbackend.domain.dto.JogoDTO;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.DataIntegrityException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class JogoService {    @Autowired    private JogoRepository jogoRepository;    public Jogo find(int id) {        return jogoRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objecto não encontrado. ID: " + id + ", Tipo: " + Jogo.class.getName()));    }    public Jogo insert(Jogo jogo) {        return jogoRepository.save(jogo);    }    public Jogo update(Jogo jogo) {        Jogo jogoNew = find(jogo.getId());        updateData(jogoNew, jogo);        return jogoRepository.save(jogoNew);    }    private void updateData(Jogo jogoNew, Jogo jogo) {        jogoNew.setSituacaoJogo(jogo.getSituacaoJogo().getId());        jogoNew.setEquipe1(jogo.getEquipe1());        jogoNew.setEquipe2(jogo.getEquipe2());        jogoNew.setAcoes(jogo.getAcoes());        jogoNew.setJogadores(jogo.getJogadores());    }    public void delete(int id) {        Jogo jogo = find(id);        delete(jogo);    }    public void delete(Jogo jogo) {        try {            jogoRepository.delete(jogo);        } catch (DataIntegrityViolationException e) {            throw new DataIntegrityException("Não é possível excluir uma categoria que possui produtos");        }    }    public List<Jogo> findAll() {        return jogoRepository.findAll();    }    public Jogo fromDTO(JogoDTO jogoDTO) {        //TODO separar os tipos de jogos        JogoFutsal jogoFutsal = new JogoFutsal();        Equipe equipe1 = new Equipe();        equipe1.setId(jogoDTO.getEquipe1Id());        Equipe equipe2 = new Equipe();        equipe2.setId(jogoDTO.getEquipe2Id());        jogoFutsal.setEquipe1(equipe1);        jogoFutsal.setEquipe2(equipe2);        jogoFutsal.setSituacaoJogo(jogoDTO.getSituacaoJogo().getId());        return jogoFutsal;    }}