package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.*;import me.samcefalo.sistemaiadbackend.repositories.AtletaRepository;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class AtletaService {    @Autowired    private AtletaRepository atletaRepository;    @Autowired    private AcaoService acaoService;    //Evitar circle dependency    @Autowired    private JogoRepository jogoRepository;    @Autowired    private UserSecurityService userSecurityService;    public Atleta find(int id) {        return atletaRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objeto nÃ£o encontrado. ID: " + id + ", Tipo: " + Atleta.class.getSimpleName()));    }    public Atleta insert(Atleta atleta) {        if (!userSecurityService.isAuth(atleta)) {            throw new AuthorizationException("Acesso negado.");        }        return atletaRepository.save(atleta);    }    public Atleta update(Atleta atleta) {        Atleta atletaDB = find(atleta.getId());        if (!userSecurityService.isAuth(atletaDB)) {            throw new AuthorizationException("Acesso negado.");        }        updateData(atletaDB, atleta);        return atletaRepository.save(atletaDB);    }    private void updateData(Atleta atletaDB, Atleta atleta) {        atletaDB.setNome(atleta.getNome());        atletaDB.setEquipe(atleta.getEquipe());        atletaDB.setNumero(atleta.getNumero());        atletaDB.setSexo(atleta.getSexo());    }    public void delete(int id) {        Atleta atleta = find(id);        if (!userSecurityService.isAuth(atleta)) {            throw new AuthorizationException("Acesso negado.");        }        delete(atleta);    }    private void delete(Atleta atleta) {        atleta.getAcoes()                .forEach(acao -> acaoService.delete(acao.getId()));        atletaRepository.delete(atleta);    }    @Transactional(readOnly = true)    public Page<Atleta> findPage(int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return atletaRepository.findAllByUser(pageRequest, userSecurityService.authenticatedUser());    }    @Transactional(readOnly = true)    public Page<Atleta> findAllByEquipe(Equipe equipe, int page, int linesPerPage, String orderBy, String direction) {        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return atletaRepository.findAllByEquipe(pageRequest, equipe);    }    @Transactional(readOnly = true)    public List<Atleta> findAll() {        return atletaRepository.findAll();    }    @Transactional(readOnly = true)    public List<Atleta> findAllByUser(User user) {        return atletaRepository.findAllByUser(user);    }    public List<Acao> findAcoes(int atletaId, Class<?> categoria) {        if (categoria.equals(Acao.class)) {            return findAcoes(atletaId);        } else            return findAcoesByCategoria(atletaId, categoria);    }    @Transactional    public List<Acao> findAcoes(int atletaId) {        Atleta atleta = find(atletaId);        return acaoService.findByAtleta(atleta);    }    @Transactional    public List<Acao> findAcoesByCategoria(int atletaId, Class<?> categoria) {        Atleta atleta = find(atletaId);        return acaoService.findAllByCategoriaAndAtleta(categoria, atleta);    }    @Transactional(readOnly = true)    public Page<Acao> findAcoesPage(int atletaId, int page, int linesPerPage, String orderBy, String direction) {        Atleta atleta = find(atletaId);        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return acaoService.findPageByAtleta(atleta, pageRequest);    }    @Transactional(readOnly = true)    public Page<Jogo> findJogosPage(int atletaId, int page, int linesPerPage, String orderBy, String direction) {        Atleta atleta = find(atletaId);        PageRequest pageRequest = PageRequest.of(page, linesPerPage,                Sort.Direction.valueOf(direction.toUpperCase()), orderBy);        return jogoRepository.findByAtletasAndUser(atleta, pageRequest, userSecurityService.authenticatedUser());    }}