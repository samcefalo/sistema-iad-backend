package me.samcefalo.sistemaiadbackend.services;import me.samcefalo.sistemaiadbackend.models.Atleta;import me.samcefalo.sistemaiadbackend.repositories.AtletaRepository;import me.samcefalo.sistemaiadbackend.repositories.JogoRepository;import me.samcefalo.sistemaiadbackend.services.exceptions.AuthorizationException;import me.samcefalo.sistemaiadbackend.services.exceptions.ObjectNotFoundException;import me.samcefalo.sistemaiadbackend.specifications.AtletaSpecification;import me.samcefalo.sistemaiadbackend.specifications.criterias.AtletaCriteria;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class AtletaService {    @Autowired    private AtletaRepository atletaRepository;    @Autowired    private AcaoService acaoService;    //Evitar circle dependency    @Autowired    private JogoRepository jogoRepository;    @Autowired    private UserSecurityService userSecurityService;    public Atleta find(int id) {        return atletaRepository.findById(id).orElseThrow(                () -> new ObjectNotFoundException("Objeto nÃ£o encontrado. ID: " + id + ", Tipo: " + Atleta.class.getSimpleName()));    }    public Atleta insert(Atleta atleta) {        if (!userSecurityService.isAuth(atleta)) {            throw new AuthorizationException("Acesso negado.");        }        return atletaRepository.save(atleta);    }    public Atleta update(Atleta atleta) {        Atleta atletaDB = find(atleta.getId());        if (!userSecurityService.isAuth(atletaDB)) {            throw new AuthorizationException("Acesso negado.");        }        updateData(atletaDB, atleta);        return atletaRepository.save(atletaDB);    }    private void updateData(Atleta atletaDB, Atleta atleta) {        atletaDB.setNome(atleta.getNome());        atletaDB.setEquipe(atleta.getEquipe());        atletaDB.setNumero(atleta.getNumero());        atletaDB.setSexo(atleta.getSexo());    }    public void delete(int id) {        Atleta atleta = find(id);        if (!userSecurityService.isAuth(atleta)) {            throw new AuthorizationException("Acesso negado.");        }        delete(atleta);    }    private void delete(Atleta atleta) {        atleta.getAcoes()                .forEach(acao -> acaoService.delete(acao.getId()));        atletaRepository.delete(atleta);    }    @Transactional(readOnly = true)    public List<Atleta> findAll(AtletaCriteria atletaCriteria) {        atletaCriteria.setUser(userSecurityService.authenticatedUser().getId());        Specification specification = new AtletaSpecification(atletaCriteria);        return atletaRepository.findAll(specification);    }    @Transactional(readOnly = true)    public Page<Atleta> findAllPage(AtletaCriteria atletaCriteria, Pageable pageable) {        atletaCriteria.setUser(userSecurityService.authenticatedUser().getId());        Specification specification = new AtletaSpecification(atletaCriteria);        return atletaRepository.findAll(specification, pageable);    }}